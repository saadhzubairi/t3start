// prisma/schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ROLE {
    PREUSER
    ADMIN
    USER
    SUPERADMIN
}

// USERS ----------------------------------------------------------------------
model User {
    id            String    @id @default(uuid()) @db.Uuid
    name          String?
    email         String?   @unique
    username      String?   @unique
    emailVerified DateTime?
    image         String?
    bio           String?
    role          ROLE      @default(PREUSER)
    active        Boolean   @default(true)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    // relations
    posts         Post[]
    comments      Comment[]
    accounts      Account[]
    sessions      Session[]
}

// POSTS ----------------------------------------------------------------------

model Post {
    id        String   @id @default(uuid()) @db.Uuid
    title     String
    content   String?
    published Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // author relation
    author   User   @relation(fields: [authorId], references: [id])
    authorId String @db.Uuid

    // comments on this post
    comments Comment[]

    @@index([title])
}

// COMMENTS -------------------------------------------------------------------

model Comment {
    id        String   @id @default(uuid()) @db.Uuid
    text      String
    createdAt DateTime @default(now())
    // which post
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String   @db.Uuid
    // which user wrote it
    author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String   @db.Uuid
}

// NEXTAUTH: ACCOUNTS, SESSIONS, VERIFICATION TOKENS -------------------------

model Account {
    id                       String  @id @default(uuid()) @db.Uuid
    userId                   String  @db.Uuid
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // use @db.Text if tokens get large
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid()) @db.Uuid
    sessionToken String   @unique
    userId       String   @db.Uuid
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id         String   @id @default(uuid()) @db.Uuid
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
